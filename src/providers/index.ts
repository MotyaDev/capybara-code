import { type AppConfig, type ChatRequest, type ChatResponse } from "../core/types";

export interface ChatProvider {
  chat(req: ChatRequest): Promise<ChatResponse>;
}

class EchoProvider implements ChatProvider {
  async chat(req: ChatRequest): Promise<ChatResponse> {
    const user = req.messages.find(m => m.role === "user");
    return { text: `üêπ Capybara (echo, model=${req.model}): ${user?.content ?? ""}` };
  }
}

class MockProvider implements ChatProvider {
  private counter = 0;

  async chat(req: ChatRequest): Promise<ChatResponse> {
    const user = [...req.messages].reverse().find(m => m.role === "user");
    const q = (user?.content ?? "").trim().toLowerCase();
    if (!q) return { text: "Hi! Ask me anything about code, tools, or ideas." };

    this.counter++;

    // Greetings
    if (/^(–ø—Ä–∏–≤–µ—Ç|hi|hello|hey|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|—Ö–∞–π)/.test(q)) {
      return { text: "–ü—Ä–∏–≤–µ—Ç! üëã –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?" };
    }

    // How are you / –∫–∞–∫ –¥–µ–ª–∞
    if (/–∫–∞–∫ –¥–µ–ª–∞|how are you|–∫–∞–∫ —Ç—ã/.test(q)) {
      return { text: "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ –∏–¥–µ—è–º–∏. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?" };
    }

    // Fix/error/lint/bug
    if (/fix|error|lint|bug|–æ—à–∏–±–∫|–∏—Å–ø—Ä–∞–≤|–±–∞–≥/.test(q)) {
      return {
        text: `–ü–æ–º–æ–≥—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å! –í–æ—Ç —á—Ç–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:

1. –°–Ω–∞—á–∞–ª–∞ –∏–∑–æ–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
2. –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏ –∏ —Å—Ç–µ–∫ –æ—à–∏–±–æ–∫
3. –ü—Ä–∏–º–µ–Ω–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å
4. –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏

–ï—Å–ª–∏ –ø–æ–∫–∞–∂–µ—à—å –∫–æ–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, —Å–º–æ–≥—É –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.`
      };
    }

    // Examples / how to / –ø—Ä–∏–º–µ—Ä
    if (/example|–ø—Ä–∏–º–µ—Ä|–ø–æ–∫–∞–∂–∏|show|how to|–∫–∞–∫/.test(q)) {
      if (/http|server|—Å–µ—Ä–≤–µ—Ä/.test(q)) {
        return {
          text: `–í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Bun:

\`\`\`ts
Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Hello from Bun!");
  },
});

console.log("Server running on http://localhost:3000");
\`\`\`

–ó–∞–ø—É—Å—Ç–∏: \`bun run server.ts\``
        };
      }
      return {
        text: `–í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä TypeScript —Ñ—É–Ω–∫—Ü–∏–∏:

\`\`\`ts
function greet(name: string): string {
  return \`Hello, \${name}!\`;
}

console.log(greet("Capybara")); // Hello, Capybara!
\`\`\`

–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`
      };
    }

    // Default varied responses
    const responses = [
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. –û–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
      "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –ù—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞, —Å–æ–≤–µ—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?",
      "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?",
    ];
    return { text: responses[this.counter % responses.length] };
  }
}

export function resolveProvider(model: string, _cfg: AppConfig): ChatProvider {
  const [provider] = model.split(":", 2);
  switch (provider) {
    case "mock":
      return new MockProvider();
    case "echo":
      return new EchoProvider();
    default:
      // Until real providers are implemented, fall back to echo
      return new EchoProvider();
  }
}
